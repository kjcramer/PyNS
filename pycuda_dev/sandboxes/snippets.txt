from bicgstab.py


    # --------------------------------------------------------------------------
    # preallocating is clumsy and does not improve things much -----------------
    # --------------------------------------------------------------------------    
    # # Preallocating arrays for vec_vec
    # prealloc_time_start = time.time()

    # gpu_ptr1 = cuda.mem_alloc(phi.val.nbytes)
    # gpu_ptr2 = cuda.mem_alloc(phi.val.nbytes)

    # # treat the allocated memory as a GPUArray object
    # gpu_arr1 = gpuarray.empty( phi.val.shape, phi.val.dtype, gpudata=gpu_ptr1 )
    # gpu_arr2 = gpuarray.empty( phi.val.shape, phi.val.dtype, gpudata=gpu_ptr2 )

    # prealloc_time_end = time.time()
    # print("Elapsed time preallocating: %2.3e s" \
    #       %(prealloc_time_end - prealloc_time_start))
    # --------------------------------------------------------------------------

from mat_vec_bnd.py


        if False:
            # append x-boundary conditions to phi
            phi_gpu = cat_x(( phi.bnd[W].val[:1,:,:], phi.val[:,:,:], phi.bnd[E].val[:1,:,:] ))
            
            # append y-boundary conditions to phi
            y_bnd_N = pad( phi.bnd[N].val, ((1, 1), (0, 0), (0, 0)), 'constant' ) 
            y_bnd_S = pad( phi.bnd[S].val, ((1, 1), (0, 0), (0, 0)), 'constant' )
            phi_gpu = cat_y(( y_bnd_S, phi_gpu, y_bnd_N ))
    
            # append z-boundary condtiions to phi
            z_bnd_B = pad( phi.bnd[B].val, ((1, 1), (1, 1), (0, 0)), 'constant' )
            z_bnd_T = pad( phi.bnd[T].val, ((1, 1), (1, 1), (0, 0)), 'constant' )
            phi_gpu = cat_z(( z_bnd_B, phi_gpu, z_bnd_T ))
            
            # preparing a for gpu
            a_C_gpu = pad(a.C, ((1, 1), (1, 1), (1, 1)), 'constant')
            a_W_gpu = pad(a.W, ((0, 2), (1, 1), (1, 1)), 'constant')
            a_E_gpu = pad(a.E, ((2, 0), (1, 1), (1, 1)), 'constant')
            a_S_gpu = pad(a.S, ((1, 1), (0, 2), (1, 1)), 'constant')
            a_N_gpu = pad(a.N, ((1, 1), (2, 0), (1, 1)), 'constant')
            a_B_gpu = pad(a.B, ((1, 1), (1, 1), (0, 2)), 'constant')
            a_T_gpu = pad(a.T, ((1, 1), (1, 1), (2, 0)), 'constant')
    
            # # C Kernel for oinly pushing phi once to gpu
            
            # __global__ void doublify(float *a)
            # {
            #     int idx = threadIdx.x + blockIdx.x * blockDim.x; // x coordinate  (numpy axis 2)
            #     int idy = threadIdx.y + blockIdx.y * blockDim.y; // y coordinate (numpy axis 1)
            #     int x_width = blockDim.x * gridDim.x;
            #     int y_width = blockDim.y * gridDim.y;
            #     for(int idz = 0; idz < 10; idz++) // loop over z coordinate (numpy axis 0)
            #     {
            #         int flat_id = idx + x_width * idy + (x_width * y_width) * idz;
            #         a[flat_id] *= 2;
            #     }
            #  }
